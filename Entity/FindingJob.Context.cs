//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Entity
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class FindingJob : DbContext
    {
        public FindingJob()
            : base("name=FindingJob")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Account> Accounts { get; set; }
        public virtual DbSet<Apply> Applies { get; set; }
        public virtual DbSet<Company> Companies { get; set; }
        public virtual DbSet<CompanySendOffer> CompanySendOffers { get; set; }
        public virtual DbSet<CV> CVs { get; set; }
        public virtual DbSet<ImgCompany> ImgCompanies { get; set; }
        public virtual DbSet<Job> Jobs { get; set; }
        public virtual DbSet<JobAlert> JobAlerts { get; set; }
        public virtual DbSet<JobOffer> JobOffers { get; set; }
        public virtual DbSet<JobPreference> JobPreferences { get; set; }
        public virtual DbSet<JobSeeker> JobSeekers { get; set; }
        public virtual DbSet<JobSkill> JobSkills { get; set; }
        public virtual DbSet<Table> Tables { get; set; }
        public virtual DbSet<Interview> Interviews { get; set; }
        public virtual DbSet<Rating> Ratings { get; set; }
        public virtual DbSet<UpdatableJobView> UpdatableJobViews { get; set; }
    
        [DbFunction("FindingJob", "GetCompanyWithMostRecruitedCandidates")]
        public virtual IQueryable<GetCompanyWithMostRecruitedCandidates_Result> GetCompanyWithMostRecruitedCandidates()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetCompanyWithMostRecruitedCandidates_Result>("[FindingJob].[GetCompanyWithMostRecruitedCandidates]()");
        }
    
        public virtual int InsertJobAndGetID(string companyID, string jobName, string position, Nullable<decimal> salary, string requirement, string description, string benefit, string workingForm, Nullable<System.DateTime> dateEnd, ObjectParameter jobID)
        {
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            var jobNameParameter = jobName != null ?
                new ObjectParameter("JobName", jobName) :
                new ObjectParameter("JobName", typeof(string));
    
            var positionParameter = position != null ?
                new ObjectParameter("Position", position) :
                new ObjectParameter("Position", typeof(string));
    
            var salaryParameter = salary.HasValue ?
                new ObjectParameter("Salary", salary) :
                new ObjectParameter("Salary", typeof(decimal));
    
            var requirementParameter = requirement != null ?
                new ObjectParameter("requirement", requirement) :
                new ObjectParameter("requirement", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var benefitParameter = benefit != null ?
                new ObjectParameter("benefit", benefit) :
                new ObjectParameter("benefit", typeof(string));
    
            var workingFormParameter = workingForm != null ?
                new ObjectParameter("WorkingForm", workingForm) :
                new ObjectParameter("WorkingForm", typeof(string));
    
            var dateEndParameter = dateEnd.HasValue ?
                new ObjectParameter("DateEnd", dateEnd) :
                new ObjectParameter("DateEnd", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertJobAndGetID", companyIDParameter, jobNameParameter, positionParameter, salaryParameter, requirementParameter, descriptionParameter, benefitParameter, workingFormParameter, dateEndParameter, jobID);
        }
    }
}
